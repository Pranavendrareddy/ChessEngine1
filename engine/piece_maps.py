import chess

class Piece_map:
    def __init__(self):
        self.Pawn = [
            0, 0, 0, 0, 0, 0, 0, 0,
            50, 50, 50, 50, 50, 50, 50, 50,
            10, 10, 20, 30, 30, 20, 10, 10,
            5, 5, 10, 25, 25, 10, 5, 5,
            0, 0, 0, 20, 20, 0, 0, 0,
            5, -5, -10, 0, 0, -10, -5, 5,
            5, 10, 10, -20, -20, 10, 10, 5,
            0, 0, 0, 0, 0, 0, 0, 0

        ]

        self.Pawn_ending = [
            0, 0, 0, 0, 0, 0, 0, 0,
            80, 80, 80, 80, 80, 80, 80, 80,
            50, 50, 50, 50, 50, 50, 50, 50,
            30, 30, 30, 30, 30, 30, 30, 30,
            20, 20, 20, 20, 20, 20, 20, 20,
            10, 10, 10, 10, 10, 10, 10, 10,
            10, 10, 10, 10, 10, 10, 10, 10,
            0, 0, 0, 0, 0, 0, 0, 0
        ]

        self.Rook = [
            0, 0, 0, 0, 0, 0, 0, 0,
            5, 10, 10, 10, 10, 10, 10, 5,
            -5, 0, 0, 0, 0, 0, 0, -5,
            -5, 0, 0, 0, 0, 0, 0, -5,
            -5, 0, 0, 0, 0, 0, 0, -5,
            -5, 0, 0, 0, 0, 0, 0, -5,
            -5, 0, 0, 0, 0, 0, 0, -5,
            0, 0, 0, 5, 5, 0, 0, 0
        ]

        self.Knight = [
            -50, -40, -30, -30, -30, -30, -40, -50,
            -40, -20, 0, 0, 0, 0, -20, -40,
            -30, 0, 10, 15, 15, 10, 0, -30,
            -30, 5, 15, 20, 20, 15, 5, -30,
            -30, 0, 15, 20, 20, 15, 0, -30,
            -30, 5, 10, 15, 15, 10, 5, -30,
            -40, -20, 0, 5, 5, 0, -20, -40,
            -50, -40, -30, -30, -30, -30, -40, -50,
        ]

        self.Bishop = [
            -20, -10, -10, -10, -10, -10, -10, -20,
            -10, 0, 0, 0, 0, 0, 0, -10,
            -10, 0, 5, 10, 10, 5, 0, -10,
            -10, 5, 5, 10, 10, 5, 5, -10,
            -10, 0, 10, 10, 10, 10, 0, -10,
            -10, 10, 10, 10, 10, 10, 10, -10,
            -10, 5, 0, 0, 0, 0, 5, -10,
            -20, -10, -10, -10, -10, -10, -10, -20,
        ]

        self.Queen = [
            -20, -10, -10, -5, -5, -10, -10, -20,
            -10, 0, 0, 0, 0, 0, 0, -10,
            -10, 0, 5, 5, 5, 5, 0, -10,
            -5, 0, 5, 5, 5, 5, 0, -5,
            0, 0, 5, 5, 5, 5, 0, -5,
            -10, 5, 5, 5, 5, 5, 0, -10,
            -10, 0, 5, 0, 0, 0, 0, -10,
            -20, -10, -10, -5, -5, -10, -10, -20
        ]

        self.King = [
            -80, -70, -70, -70, -70, -70, -70, -80,
            -60, -60, -60, -60, -60, -60, -60, -60,
            -40, -50, -50, -60, -60, -50, -50, -40,
            -30, -40, -40, -50, -50, -40, -40, -30,
            -20, -30, -30, -40, -40, -30, -30, -20,
            -10, -20, -20, -20, -20, -20, -20, -10,
            20, 20, -5, -5, -5, -5, 20, 20,
            20, 30, 10, 0, 0, 10, 30, 20
        ]

        self.King_ending = [
            -20, -10, -10, -10, -10, -10, -10, -20,
            -5, 0, 5, 5, 5, 5, 0, -5,
            -10, -5, 20, 30, 30, 20, -5, -10,
            -15, -10, 35, 45, 45, 35, -10, -15,
            -20, -15, 30, 40, 40, 30, -15, -20,
            -25, -20, 20, 25, 25, 20, -20, -25,
            -30, -25, 0, 0, 0, 0, -25, -30,
            -50, -30, -30, -30, -30, -30, -30, -50
        ]

        self.map = []

    def gen_map(self, piece, ending, color):
        if color == chess.WHITE:
            if piece == chess.PAWN:
                if not ending:
                    self.map = self.Pawn
                else:
                    self.map = self.Pawn_ending
            elif piece == chess.KING:
                if not ending:
                    self.map = self.King
                else:
                    self.map = self.King_ending
            elif piece == chess.QUEEN:
                self.map = self.Queen
            elif piece == chess.ROOK:
                self.map = self.Rook
            elif piece == chess.BISHOP:
                self.map = self.Bishop
            elif piece == chess.KNIGHT:
                self.map = self.Knight
        else:
            if piece == chess.PAWN:
                if not ending:
                    self.map = self.Pawn[::-1]
                else:
                    self.map = self.Pawn_ending[::-1]
            elif piece == chess.KING:
                if not ending:
                    self.map = self.King[::-1]
                else:
                    self.map = self.King_ending[::-1]
            elif piece == chess.QUEEN:
                self.map = self.Queen[::-1]
            elif piece == chess.ROOK:
                self.map = self.Rook[::-1]
            elif piece == chess.BISHOP:
                self.map = self.Bishop[::-1]
            elif piece == chess.KNIGHT:
                self.map = self.Knight[::-1]


